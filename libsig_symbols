#!/bin/bash

function fatal() {
	echo "error: $@" 1>&2;
	exit 1;
}

function mac_symbols() {
	${otool} -x -v "${1}" | \
		gawk '\
			function show() {\
				if (addr)\
					printf "%s,0x%s,0x%s\n", fnname, start, addr;\
			}\
			$1 ~ /^[[:digit:]]/ { gsub("^0*", "", $1); addr=$1; }\
			start == ""         { start=addr; }\
			/:$/                { show(); gsub(":$", "", $1); fnname=$1; start=""; }\
			END                 { show(); }\
		';
}

function linux_symbols() {
	${objdump} -d "${1}" | \
		gawk '\
			function show() {\
				if (addr)\
					printf "%s,%s,%s\n", fnname,start,addr;\
			}\
			/>:/                          { show(); gsub("^0*", "", $1); start="0x"$1; gsub("[<>:]", "", $2); fnname=$2; }\
			/^[[:space:]]*[[:xdigit:]]*:/ { gsub(":$", "", $1); addr="0x"$1; }\
			END                           { show(); }\
		';
}

if [ $# -ne 1 ]; then
	echo "Usage: $0 [Binary program]";
	exit 1;
fi

# Compensate valgrind's load address when PIE is used.
# This may vary dependending on the architecture.
: ${ADDR_OFFSET_COMPENSATION:=0x108000}

program="$1";
[ -x "${program}" ] || fatal "Invalid binary program: ${program}";

os="$(uname -s)";
if [ "$os" == "Darwin" ]; then
	otool=$(which otool);
	[ -x "${otool}" ] || fatal "The otool is required";

	${otool} -h -v "${program}" 2>/dev/null | grep -q 'PIE';
	[ $? -eq 0 ] && is_pie=1 || is_pie=0;

	funct=mac_symbols;
elif [ "$os" == "Linux" ]; then
	readelf=$(which readelf);
	[ -x "${readelf}" ] || fatal "The readelf is required";

	objdump=$(which objdump);
	[ -x "${objdump}" ] || fatal "The objdump is required";

	${readelf} -h "${program}" 2>/dev/null | grep -q 'Type:[[:space:]]*DYN';
	[ $? -eq 0 ] && is_pie=1 || is_pie=0;

	funct=linux_symbols;
else
	fatal "Unsupported system: $os";
fi

for entry in $(eval "${funct}" "${program}"); do
	name=${entry/,*};
	addr=$(echo ${entry#*,} | cut -f1 -d',');
	if [ ${is_pie} -eq 1 ]; then
		tmp=$(echo "${addr:2}" | tr '[[:lower:]]' '[[:upper:]]');
		addr="0x"$(echo "obase=16;ibase=16;${tmp}+${ADDR_OFFSET_COMPENSATION:2}" | bc -l | tr '[[:upper:]]' '[[:lower:]]');
	fi

	echo "${addr},${name}";
done
